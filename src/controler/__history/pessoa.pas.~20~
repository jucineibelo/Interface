unit pessoa;

interface

uses
  FireDAC.Comp.Client,
  Data.DB;

type
  IPessoa = interface
    ['{AF08CBBC-3DD2-4960-BCB5-8CB4C01A0A7C}']
    //GET
    function GetId: Integer;
    function GetNome: string;
    function GetDataCadastro: TDateTime;
    function GetTelefone: string;
    function GetEndereco: string;
    function GetCnpj: string;
    function GetCpf: string;

    //PUT
    procedure PutId(const AValue: Integer);
    procedure PutNome(const AValue: string);
    procedure PutDataCadastro(const AValue: TDateTime);
    procedure PutTelefone(const AValue: string);
    procedure PutEndereco(const AValue: string);
    procedure PutCnpj(const AValue: string);
    procedure PutCpf(const AValue: string);

    //SET
    function SetId(AValue: Integer): IPessoa;
    function SetNome(const AValue: string): IPessoa;
    function SetDataCadastro(const AValue: TDateTime): IPessoa;
    function SetTelefone(const AValue: string): IPessoa;
    function SetEndereco(const AValue: string): IPessoa;
    function SetCpf(const AValue: string): IPessoa;
    function SetCnpj(const AValue: string): IPessoa;

    //Propertys
    property Id: Integer read GetId write PutId;
    property Nome: string read GetNome write PutNome;
    property DataCadastro: TDateTime read GetDataCadastro write PutDataCadastro;
    property Telefone: string read GetTelefone write PutTelefone;
    property Endereco: string read GetEndereco write PutEndereco;
    property Cpf: string read GetCpf write PutCpf;
    property Cnpj: string read GetCnpj write PutCnpj;

  end;

type
  TPessoa = class(TInterfacedObject, IPessoa)
  strict private
    FId: Integer;
    FNome: string;
    FDataCadastro: TDateTime;
    FTelefone: string;
    FEndereco: string;
    FQryPessoa: TFDQuery;
    FCpf: string;
    FCnpj: string;

    //GET
    function GetId: Integer;
    function GetNome: string;
    function GetDataCadastro: TDateTime;
    function GetTelefone: string;
    function GetEndereco: string;
    function GetCnpj: string;
    function GetCpf: string;

    //PUT
    procedure PutId(const AValue: Integer);
    procedure PutNome(const AValue: string);
    procedure PutDataCadastro(const AValue: TDateTime);
    procedure PutTelefone(const AValue: string);
    procedure PutEndereco(const AValue: string);
    procedure PutCnpj(const AValue: string);
    procedure PutCpf(const AValue: string);

  public
    constructor Create;
    destructor Destroy; override;
    class function Instance: IPessoa;

    //SET
    function SetId(AValue: Integer): IPessoa; reintroduce;
    function SetNome(const AValue: string): IPessoa; reintroduce;
    function SetDataCadastro(const AValue: TDateTime): IPessoa; reintroduce;
    function SetTelefone(const AValue: string): IPessoa; reintroduce;
    function SetEndereco(const AValue: string): IPessoa; reintroduce;
    function SetCpf(const AValue: string): IPessoa; reintroduce;
    function SetCnpj(const AValue: string): IPessoa; reintroduce;

  published
    property Id: Integer read GetId write PutId;
    property Nome: string read GetNome write PutNome;
    property DataCadastro: TDateTime read GetDataCadastro write PutDataCadastro;
    property Telefone: string read GetTelefone write PutTelefone;
    property Endereco: string read GetEndereco write PutEndereco;
    property Cpf: string read GetCpf write PutCpf;
    property Cnpj: string read GetCnpj write PutCnpj;
  end;

const
  CAMPO_PESQUISA_VAZIO = 'O campo de pesquisa está vazio!';
  ERRO_AO_CONECTAR = 'Erro ao conectar banco de dados: ';
  ERRO_AO_CARREGAR_DADOS = 'Erro ao carregar dados: ';

implementation

uses
  Firedac.Stan.Param,
  System.SysUtils,
  FireDAC.Phys.SQLite,
  FireDAC.Comp.UI,
  model.connections;

{ TPessoa }


constructor TPessoa.Create;
begin
  FId           := 0;
  FNome         := EmptyStr;
  FDataCadastro := Now;
  FTelefone     := EmptyStr;
  FEndereco     := EmptyStr;
end;

destructor TPessoa.Destroy;
begin
  inherited;
end;



function TPessoa.GetNome: string;
begin
  Result := FNome;
end;

function TPessoa.GetCnpj: string;
begin
  Result := FCnpj;
end;

function TPessoa.GetCpf: string;
begin
  Result := FCpf;
end;

function TPessoa.GetDataCadastro: TDateTime;
begin
  Result := FDataCadastro;
end;

function TPessoa.GetTelefone: string;
begin
  Result := FTelefone;
end;

function TPessoa.GetEndereco: string;
begin
  Result := FEndereco;
end;

function TPessoa.GetId: Integer;
begin
  Result := FId;
end;

class function TPessoa.Instance: IPessoa;
begin
  Result := Self.Create;
end;

procedure TPessoa.PutNome(const AValue: string);
begin
  if FNome = AValue then
  begin
    Exit;
  end;

  FNome := AValue;
end;

procedure TPessoa.PutCnpj(const AValue: string);
begin
  if FCnpj = AValue then
  begin
    Exit;
  end;

  Fcnpj := Avalue;
end;

procedure TPessoa.PutCpf(const AValue: string);
begin
  if FCpf = AValue then
  begin
    Exit;
  end;

  FCpf := Avalue;
end;

procedure TPessoa.PutDataCadastro(const AValue: TDateTime);
begin
  if FDataCadastro = AValue then
  begin
    Exit;
  end;

  FDataCadastro := AValue;
end;

procedure TPessoa.PutTelefone(const AValue: string);
begin
  if FTelefone = AValue then
  begin
    Exit;
  end;

  FTelefone := AValue;
end;

procedure TPessoa.PutEndereco(const AValue: string);
begin
  if FEndereco = AValue then
  begin
    Exit;
  end;

  FEndereco := AValue;
end;

procedure TPessoa.PutId(const AValue: Integer);
begin
  if FId = AValue then
  begin
    Exit;
  end;

  FId := AValue;
end;

function TPessoa.SetCnpj(const AValue: string): IPessoa;
begin
  PutCnpj(AValue);
  Result := Self;
end;

function TPessoa.SetCpf(const AValue: string): IPessoa;
begin
  PutCpf(AValue);
  Result := Self;
end;

function TPessoa.SetDataCadastro(const AValue: TDateTime): IPessoa;
begin
  PutDataCadastro(AValue);
  Result := Self;
end;

function TPessoa.SetEndereco(const AValue: string): IPessoa;
begin
  PutEndereco(AValue);
  Result := Self;
end;

function TPessoa.SetId(AValue: Integer): IPessoa;
begin
  PutId(AValue);
  Result := Self;
end;

function TPessoa.SetNome(const AValue: string): IPessoa;
begin
  PutNome(AValue);
  Result := Self;
end;

function TPessoa.SetTelefone(const AValue: string): IPessoa;
begin
  PutTelefone(AValue);
  Result := Self;
end;

end.

